#==================
# Build OpenWrt 
#==================

name: Build x86_64 OpenWrt

on:
  repository_dispath:
    types:
  workflow_dispatch: 
  release:
    types: published
  schedule:
    - cron: 0 20 * * *
  watch:
    types: started

env:
  REPO_URL: 
  REPO_BRANCH:
  CONFIG_FILE:
  DEVICE:
  SCRIPTS: scripts/extra.sh
  IPV6MOD_IN_FIRMWARE: true
  KMODS_IN_FIRMWARE: true
  UPLOAD_COWTRANSFER: true
  UPLOAD_WETRANSFER: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-18.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804) tree
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"

    - name: Clone Source Code
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

    - name: Update Feeds
      run: |
        cd openwrt
        echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV
        ./scripts/feeds update -a

    - name: Install Feeds
      run: |
        cd $OPENWRTROOT
        ./scripts/feeds install -a

    - name: Load Custom Configuration
      run: |
        [ -e files ] && mv files $OPENWRTROOT/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRTROOT/.config
        cat config/lean/x86/x86-lean-extra.config >> $OPENWRTROOT/.config
        chmod +x scripts/*.sh
        cd $OPENWRTROOT
        ../$DIY_SH
        ../scripts/preset-clash-core.sh amd64
        ../scripts/preset-terminal-tools.sh
        
    - name: Download Package
      id: package
      run: |
        cd $OPENWRTROOT
        if "$KMODS_IN_FIRMWARE" = 'true'
        then
            echo "CONFIG_ALL_KMODS=y" >> .config
        fi
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile Packages
      id: compile
      run: |
        cd $OPENWRTROOT
        echo -e "$(nproc) thread compile"
        make tools/compile -j$(nproc) || make tools/compile -j1 V=s
        make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s
        make target/compile -j$(nproc) || make target/compile -j1 V=s IGNORE_ERRORS=1
        make diffconfig
        make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j1 V=s IGNORE_ERRORS=1
        make package/index
        cd $OPENWRTROOT/bin/packages/*
        PLATFORM=$(basename `pwd`)
        echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
        cd $OPENWRTROOT/bin/targets/*
        TARGET=$(basename `pwd`)
        echo "TARGET=$TARGET" >> $GITHUB_ENV
        cd *
        SUBTARGET=$(basename `pwd`)
        echo "SUBTARGET=$SUBTARGET" >> $GITHUB_ENV
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Generate Firmware
      if: steps.compile.outputs.status == 'success'
      id: generate
      run: |
        cd $OPENWRTROOT
        mkdir -p files/etc/opkg
        if "$KMODS_IN_FIRMWARE" = 'true'
        then
            mkdir -p files/www/snapshots/targets
            cp -r bin/targets/$TARGET files/www/snapshots/targets
            cp ../config/opkg/distfeeds-18.06-local.conf files/etc/opkg/distfeeds.conf
            sed -i "s/subtarget/$SUBTARGET/g" files/etc/opkg/distfeeds.conf
            sed -i "s/target\//$TARGET\//g" files/etc/opkg/distfeeds.conf
            sed -i "s/platform/$PLATFORM/g" files/etc/opkg/distfeeds.conf
        else
            cp ../config/opkg/distfeeds-18.06-remote.conf files/etc/opkg/distfeeds.conf
            sed -i "s/subtarget/$SUBTARGET/g" files/etc/opkg/distfeeds.conf
            sed -i "s/target\//$TARGET\//g" files/etc/opkg/distfeeds.conf
            sed -i "s/platform/$PLATFORM/g" files/etc/opkg/distfeeds.conf
        fi
        if "$IPV6MOD_IN_FIRMWARE" = 'true'
        then
            mkdir -p files/www/ipv6-modules
            cp bin/packages/$PLATFORM/luci/luci-proto-ipv6* files/www/ipv6-modules
            cp bin/packages/$PLATFORM/base/{ipv6helper*,odhcpd-ipv6only*,odhcp6c*,6in4*} "files/www/ipv6-modules"
            cp bin/targets/$TARGET/$SUBTARGET/packages/{ip6tables*,kmod-nf-nat6*,kmod-ipt-nat6*,kmod-sit*,kmod-ip6tables-extra*} "files/www/ipv6-modules"
            mkdir -p files/bin
            cp ../scripts/ipv6-helper.sh files/bin/ipv6-helper
        fi
        make package/install -j$(nproc) || make package/install -j1 V=s
        make target/install -j$(nproc) || make target/install -j1 V=s
        make checksum
        echo "::set-output name=status::success"
        
    - name: Deploy Packages-Server
      if: steps.generate.outputs.status == 'success'
      run: |
        mkdir -p server/web/snapshots/targets/$TARGET/$SUBTARGET
        cp -r $OPENWRTROOT/bin/packages server/web/snapshots
        cp -r $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET/packages server/web/snapshots/targets/$TARGET/$SUBTARGET
        mkdir -p $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET/pre-packages-server
        cp -r server $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET/pre-packages-server
        cd $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET
        zip -q -r packages-server.zip pre-packages-server/server
        
    - name: Upload Config
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: config.buildinfo
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/config.buildinfo
        
    - name: Upload Packages-Server
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: packages-server
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/pre-packages-server
        
    - name: Upload Packages Info
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}.manifest
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}.manifest
        
    - name: Upload Kernel Packages
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: kernel-packages
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/packages/
        
    - name: Upload RootFS Archive
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-generic-rootfs.tar.gz
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-rootfs.tar.gz

    - name: Upload Combined DVD Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-combined.img
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-combined.img
        
    - name: Upload Combined VirtualBox Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-combined.vdi
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-combined.vdi
        
    - name: Upload Combined VMware Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-combined.vmdk
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-combined.vmdk

    - name: Upload GPT DVD Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-combined-efi.img
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-combined-efi.img
        
    - name: Upload GPT VirtualBox Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-combined-efi.vdi
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-combined-efi.vdi
        
    - name: Upload GPT VMware Image
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: ${{ env.DEVICE }}-squashfs-combined-efi.vmdk
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-combined-efi.vmdk

    - name: Upload Images Sha256sums
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: sha256sums
        path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/sha256sums

    - name: Organize Files
      id: organize
      if: steps.generate.outputs.status == 'success' && !cancelled()
      run: |
        cd $OPENWRTROOT
        zip -qr DL.zip dl
        cd $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET
        rm -rf packages pre-packages-server
        tree -L 1
        gzip *.img
        cd $OPENWRTROOT/bin/targets/$TARGET/
        mkdir -p uefi-images
        mkdir -p legacy-images
        mkdir -p other-files
        mv $SUBTARGET/*combined-efi* uefi-images
        mv $SUBTARGET/*combined* legacy-images
        mv $SUBTARGET/* other-files
        curl -fsSL git.io/file-transfer | sh
        df -hT $PWD
        echo "::set-output name=status::success"
    - name: Upload Uefi Firmwares To Cowtransfer
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true'
      run: |
        cd $OPENWRTROOT/bin/targets/$TARGET
        ./transfer cow --block 2621440 -s -p 64 --no-progress ./uefi-images 2>&1 | tee cowtransfer-uefi.log
        echo "::warning file=Cowtransfer-UEFI=::$(cat cowtransfer-uefi.log | grep https)"
        
    - name: Upload Legacy Firmwares To Cowtransfer
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true'
      run: |
        cd $OPENWRTROOT/bin/targets/$TARGET/
        ./transfer cow --block 2621440 -s -p 64 --no-progress ./legacy-images 2>&1 | tee cowtransfer-legacy.log
        echo "::warning file=Cowtransfer-Legacy=::$(cat cowtransfer-legacy.log | grep https)"
        
    - name: Upload Other Files To Cowtransfer
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true'
      run: |
        cd $OPENWRTROOT/bin/targets/$TARGET/
        ./transfer cow --block 2621440 -s -p 64 --no-progress ./other-files 2>&1 | tee cowtransfer-other.log
        echo "::warning file=Cowtransfer-OtherFiles=::$(cat cowtransfer-other.log | grep https)"
        
    - name: Upload Uefi Firmwares To WeTransfer
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true'
      run: |
        cd $OPENWRTROOT/bin/targets/$TARGET
        ./transfer wet -s -p 16 --no-progress ./uefi-images 2>&1 | tee wetransfer-uefi.log
        echo "::warning file=Wetransfer-UEFI=::$(cat wetransfer-uefi.log | grep https)"
        
    - name: Upload Legacy Firmwares To WeTransfer
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true'
      run: |
        cd $OPENWRTROOT/bin/targets/$TARGET/
        ./transfer wet -s -p 16 --no-progress ./legacy-images 2>&1 | tee wetransfer-legacy.log
        echo "::warning file=Wetransfer-Legacy::$(cat wetransfer-legacy.log | grep https)"
        
    - name: Upload Other Files To WeTransfer
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true'
      run: |
        cd $OPENWRTROOT/bin/targets/$TARGET/
        ./transfer wet -s -p 16 --no-progress ./other-files 2>&1 | tee wetransfer-other.log
        echo "::warning file=Wetransfer-OtherFiles::$(cat wetransfer-other.log | grep https)"
        
    - name: Upload DL To CowTransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        cd $OPENWRTROOT/bin/targets/$TARGET/
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${OPENWRTROOT}/DL.zip 2>&1 | tee cowtransfer-dl.log
        
    - name: Upload DL To WeTransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        cd $OPENWRTROOT/bin/targets/$TARGET/
        ./transfer wet -s -p 16 --no-progress ${OPENWRTROOT}/DL.zip 2>&1 | tee wetransfer-dl.log
